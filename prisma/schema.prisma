generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id                String               @id @default(uuid())
  name              String
  code              String               @unique
  address           String
  phone             String
  email             String
  admissionNumberFormat      String?   // e.g., "{SCHOOL_CODE}-{YEAR}-{SEQ}"
  lastAdmissionNumber        String?   // e.g., "ABC-2024-001"
  admissionNumberAutoIncrement Boolean @default(true)
  logo              String?
  isActive          Boolean              @default(true)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  academicYears     AcademicYear[]
  classes           Class[]
  classProgressions ClassProgression[]
  feeStructures     FeeStructure[]
  paymentRequests   PaymentRequest[]
  promotionCriteria PromotionCriteria[]
  students          Student[]
  studentArrears    StudentArrear[]
  termlyFees        TermlyFeeStructure[]
  users             User[]
}

model User {
  id                String               @id @default(uuid())
  name              String
  email             String               @unique
  password          String
  role              String
  schoolId          String?
  isActive          Boolean              @default(true)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  phone             String?
  employeeId        String?
  teachingClasses   Class[]              @relation("TeacherClasses")
  feeStructureLogs  FeeStructureLog[]
  exclusions        PromotionExclusion[] @relation("UserExclusions")
  promotions        PromotionLog[]       @relation("UserPromotions")
  students          Student[]            @relation("ParentStudents")
  studentProfile    Student?
  teacherProfile    TeacherProfile?
  createdTermlyFees TermlyFeeStructure[] @relation("UserCreatedTermlyFees")
  createdCriteria   PromotionCriteria[]  @relation("CriteriaCreator")
  createdProgressions ClassProgression[] @relation("ProgressionCreator")
  school            School?              @relation(fields: [schoolId], references: [id])
}

model TeacherProfile {
  id            String    @id @default(uuid())
  qualification String?
  dateJoined    DateTime?
  tempPassword  String?
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
}

model Grade {
  id        String   @id @default(uuid())
  name      String
  isAlumni  Boolean  @default(false) // Field from promotions logic
  classes   Class[]
  termlyFees TermlyFeeStructure[]
}

model Class {
  id           String    @id @default(uuid())
  name         String
  schoolId     String
  teacherId    String?
  academicYear String
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  gradeId      String
  grade        Grade     @relation(fields: [gradeId], references: [id])
  school       School    @relation(fields: [schoolId], references: [id])
  teacher      User?     @relation("TeacherClasses", fields: [teacherId], references: [id])
  students     Student[]
}
model Student {
  id                    String               @id @default(uuid())
  userId                String               @unique
  schoolId              String
  classId               String?              // references Class (section/stream)
  admissionNumber       String
  dateOfBirth           DateTime?
  dateAdmitted          DateTime?
  parentId              String?
  isActive              Boolean              @default(true)
  status                String               @default("active")
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  academicYear          Int?                 @default(2025)

  tempPassword          String?
  parentName            String?
  parentPhone           String?
  parentEmail           String?
  address               String?
  gender                String?
  avatarUrl             String?
  emergencyContact      String?
  medicalInfo           String?
  notes                 String?

  // Academic tracking fields from `main`
  currentAcademicYearId String?
  currentTermId         String?
  joinedAcademicYearId  String?
  joinedTermId          String?

  // Relations
  user                  User                 @relation(fields: [userId], references: [id])
  school                School               @relation(fields: [schoolId], references: [id])
  class                 Class?               @relation(fields: [classId], references: [id])
  parent                User?                @relation("ParentStudents", fields: [parentId], references: [id])
  currentAcademicYear   AcademicYear?        @relation(fields: [currentAcademicYearId], references: [id])
  currentTerm           Term?                @relation(fields: [currentTermId], references: [id])
  joinedAcademicYear    AcademicYear?        @relation("JoinedAcademicYear", fields: [joinedAcademicYearId], references: [id])
  joinedTerm            Term?                @relation("JoinedTerm", fields: [joinedTermId], references: [id])

  // Data relationships
  payments              Payment[]
  paymentRequests       PaymentRequest[]
  studentFees           StudentFee[]
  feeStatements         FeeStatement[]
  promotionLogs         PromotionLog[]
  promotionExclusions   PromotionExclusion[]
  receipts              Receipt[]
  studentArrears        StudentArrear[]
  yearlyBalances        StudentYearlyBalance[]
}

model Payment {
  id              String   @id @default(uuid())
  studentId       String
  amount          Float
  paymentDate     DateTime
  paymentMethod   String
  referenceNumber String?
  receiptNumber   String
  description     String
  receivedBy      String
  createdAt       DateTime @default(now())
  academicYearId  String
  termId          String

  student         Student  @relation(fields: [studentId], references: [id])
  receipt         Receipt?
  academicYear    AcademicYear? @relation(fields: [academicYearId], references: [id])
  term            Term?         @relation(fields: [termId], references: [id])
}

model Receipt {
  id                          String   @id @default(uuid())
  paymentId                   String   @unique
  studentId                   String
  receiptNumber               String
  amount                      Float
  paymentDate                 DateTime
  createdAt                   DateTime @default(now())
  academicYearOutstandingBefore Float
  academicYearOutstandingAfter  Float
  termOutstandingBefore        Float?
  termOutstandingAfter         Float?
  academicYearId               String?
  termId                       String?
  paymentMethod                String? // NEW: for reporting
  referenceNumber              String? // NEW: for reporting

  payment                     Payment  @relation(fields: [paymentId], references: [id])
  student                     Student  @relation(fields: [studentId], references: [id])
  academicYear                AcademicYear? @relation(fields: [academicYearId], references: [id])
  term                        Term?         @relation(fields: [termId], references: [id])
}

model FeeStructure {
  id          String       @id @default(uuid())
  name        String
  description String
  amount      Float
  frequency   String
  dueDate     DateTime?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  schoolId    String?
  school      School?      @relation(fields: [schoolId], references: [id])
  studentFees StudentFee[]
}

model TermlyFeeStructure {
  id             String            @id @default(uuid())
  term           String
  year           Int
  totalAmount    Decimal           @db.Decimal(10, 2)
  breakdown      Json
  isActive       Boolean           @default(true)
  createdBy      String
  schoolId       String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  dueDate        DateTime?
  isReleased     Boolean           @default(false)
  gradeId        String
  academicYearId String?
  termId         String?

  logs           FeeStructureLog[]
  academicYear   AcademicYear?     @relation(fields: [academicYearId], references: [id])
  creator        User              @relation("UserCreatedTermlyFees", fields: [createdBy], references: [id])
  grade          Grade             @relation(fields: [gradeId], references: [id])
  school         School            @relation(fields: [schoolId], references: [id])
  termRef        Term?             @relation(fields: [termId], references: [id])
}

model FeeStructureLog {
  id             String             @id @default(uuid())
  feeStructureId String
  action         String
  performedBy    String
  timestamp      DateTime           @default(now())
  details        Json?
  feeStructure   TermlyFeeStructure @relation(fields: [feeStructureId], references: [id])
  user           User               @relation(fields: [performedBy], references: [id])
}

model StudentFee {
  id             String       @id @default(uuid())
  studentId      String
  feeStructureId String
  amount         Float
  dueDate        DateTime
  status         String
  balance        Float
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  feeStructure   FeeStructure @relation(fields: [feeStructureId], references: [id])
  student        Student      @relation(fields: [studentId], references: [id])
}

model FeeStatement {
  id             String   @id @default(uuid())
  studentId      String
  period         String
  openingBalance Float
  totalCharged   Float
  totalPaid      Float
  closingBalance Float
  transactions   Json
  generatedAt    DateTime
  student        Student  @relation(fields: [studentId], references: [id])
}

model PaymentRequest {
  id              String   @id @default(uuid())
  studentId       String
  schoolId        String
  amount          Float
  currency        String   @default("KES")
  paymentMethod   String
  description     String
  referenceNumber String
  callbackUrl     String?
  metadata        Json?
  createdAt       DateTime @default(now())
  expiresAt       DateTime
  status          String

  school          School   @relation(fields: [schoolId], references: [id])
  student         Student  @relation(fields: [studentId], references: [id])
}

model PromotionCriteria {
  id                    String   @id @default(uuid())
  schoolId              String
  classLevel            String   // e.g., "Grade 1", "Form 1"
  name                  String   // e.g., "Standard Promotion Criteria", "Merit Promotion"
  description           String?
  
  // Academic Performance Criteria
  minAverageGrade       Float?   // Minimum average grade (e.g., 50.0, 60.0)
  minSubjectPasses      Int?     // Minimum number of subjects to pass
  maxSubjectFailures    Int?     // Maximum number of subjects allowed to fail
  requireAllSubjects    Boolean  @default(false) // Must pass all subjects
  
  // Fee Payment Criteria
  maxOutstandingBalance Float?   // Maximum outstanding balance allowed (e.g., 5000)
  requireFullPayment    Boolean  @default(false) // Must have zero balance
  allowPartialPayment   Boolean  @default(true)  // Allow promotion with partial payment
  
  // Attendance Criteria
  minAttendanceRate     Float?   // Minimum attendance percentage (e.g., 80.0)
  maxAbsenceDays        Int?     // Maximum number of absence days allowed
  
  // Discipline Criteria
  maxDisciplinaryCases  Int?     // Maximum number of disciplinary cases
  requireCleanRecord    Boolean  @default(false) // Must have clean disciplinary record
  
  // Additional Criteria
  requireParentConsent  Boolean  @default(false) // Require parent consent for promotion
  requireTeacherApproval Boolean @default(true)  // Require teacher approval
  requirePrincipalApproval Boolean @default(true) // Require principal approval
  
  // Custom Criteria (JSON field for flexible additional requirements)
  customCriteria        Json?    // e.g., {"sportsParticipation": true, "communityService": 10}
  
  // Status and Metadata
  isActive              Boolean  @default(true)
  isDefault             Boolean  @default(false) // Default criteria for the class level
  priority              Int      @default(1)     // Priority order for multiple criteria
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  createdBy             String?  // User who created this criteria
  
  school                School   @relation(fields: [schoolId], references: [id])
  creator               User?    @relation("CriteriaCreator", fields: [createdBy], references: [id])
  
  // Opposite relations
  classProgressions     ClassProgression[]
  promotionLogs         PromotionLog[]

  @@unique([schoolId, classLevel, name])
  @@index([schoolId, classLevel, isActive])
}

model ClassProgression {
  id                    String   @id @default(uuid())
  schoolId              String
  fromClass             String   // e.g., "Grade 1A"
  toClass               String   // e.g., "Grade 2A"
  fromGrade             String   // e.g., "Grade 1"
  toGrade               String   // e.g., "Grade 2"
  order                 Int
  isActive              Boolean  @default(true)
  
  // Progression Rules
  requireCriteria       Boolean  @default(true)  // Whether to apply promotion criteria
  criteriaId            String?  // Reference to specific PromotionCriteria
  allowManualOverride   Boolean  @default(false) // Allow manual promotion override
  
  // Academic Year Progression
  fromAcademicYear      String   // e.g., "2025"
  toAcademicYear        String   // e.g., "2026"
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  createdBy             String?
  
  school                School   @relation(fields: [schoolId], references: [id])
  criteria              PromotionCriteria? @relation(fields: [criteriaId], references: [id])
  creator               User?    @relation("ProgressionCreator", fields: [createdBy], references: [id])

  @@unique([schoolId, fromClass])
  @@index([schoolId, fromGrade, toGrade])
}

model PromotionLog {
  id                    String               @id @default(uuid())
  studentId             String
  fromClass             String
  toClass               String
  fromGrade             String
  toGrade               String
  fromYear              String
  toYear                String
  promotedBy            String
  promotionDate         DateTime             @default(now())
  
  // Detailed Criteria Results
  criteriaResults       Json                 // Detailed breakdown of how student met criteria
  appliedCriteriaId     String?              // Which criteria was applied
  manualOverride        Boolean              @default(false) // Whether this was manually overridden
  overrideReason        String?              // Reason for manual override
  
  // Student Performance at Time of Promotion
  averageGrade          Float?               // Student's average grade
  attendanceRate        Float?               // Student's attendance rate
  outstandingBalance    Float?               // Outstanding balance at promotion time
  disciplinaryCases     Int?                 // Number of disciplinary cases
  
  notes                 String?
  promotionType         String               // "automatic", "manual", "bulk"
  
  exclusions            PromotionExclusion[]
  user                  User                 @relation("UserPromotions", fields: [promotedBy], references: [id])
  student               Student              @relation(fields: [studentId], references: [id])
  appliedCriteria       PromotionCriteria?   @relation(fields: [appliedCriteriaId], references: [id])

  @@index([studentId, promotionDate])
  @@index([fromClass, toClass, promotionDate])
}

model PromotionExclusion {
  id                    String       @id @default(uuid())
  promotionLogId        String
  studentId             String
  reason                String       // "academic", "fees", "attendance", "discipline", "manual"
  detailedReason        String?      // Detailed explanation
  criteriaFailed        Json?        // Which specific criteria failed
  excludedBy            String
  excludedAt            DateTime     @default(now())
  
  // Exclusion Details
  academicGrade         Float?       // Student's grade if academic reason
  outstandingBalance    Float?       // Outstanding balance if fees reason
  attendanceRate        Float?       // Attendance rate if attendance reason
  disciplinaryCases     Int?         // Number of cases if discipline reason

  user                  User         @relation("UserExclusions", fields: [excludedBy], references: [id])
  promotionLog          PromotionLog @relation(fields: [promotionLogId], references: [id])
  student               Student      @relation(fields: [studentId], references: [id])

  @@index([studentId, excludedAt])
}

model AcademicYear {
  id                 String               @id @default(uuid())
  schoolId           String
  name               String
  startDate          DateTime
  endDate            DateTime
  isCurrent          Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  school             School               @relation(fields: [schoolId], references: [id])
  students           Student[]
  joinedStudents     Student[]            @relation("JoinedAcademicYear")
  studentArrears     StudentArrear[]
  terms              Term[]
  TermlyFeeStructure TermlyFeeStructure[]
  payments           Payment[]
  receipts           Receipt[]

  @@unique([schoolId, name])
}

model Term {
  id                 String               @id @default(uuid())
  academicYearId     String
  name               String
  startDate          DateTime
  endDate            DateTime
  isCurrent          Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  students           Student[]
  joinedStudents     Student[]            @relation("JoinedTerm")
  academicYear       AcademicYear         @relation(fields: [academicYearId], references: [id])
  TermlyFeeStructure TermlyFeeStructure[]
  payments           Payment[]
  receipts           Receipt[]

  @@unique([academicYearId, name])
}

model StudentArrear {
  id             String       @id @default(uuid())
  studentId      String
  schoolId       String
  academicYearId String
  arrearAmount   Float
  dateRecorded   DateTime     @default(now())
  notes          String?

  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  school         School       @relation(fields: [schoolId], references: [id])
  student        Student      @relation(fields: [studentId], references: [id])

  @@index([studentId, academicYearId])
}

// Rename model StudentArrears to StudentYearlyBalance
model StudentYearlyBalance {
  id              String   @id @default(uuid())
  studentId       String
  academicYear    Int
  openingBalance  Float    @default(0) // Balance carried forward from previous year
  totalCharged    Float    @default(0) // Total fees charged for this year
  totalPaid       Float    @default(0) // Total payments made for this year
  closingBalance  Float    @default(0) // Balance at end of year (can be negative for overpayment)
  isCarriedForward Boolean @default(false) // Whether this balance was carried forward
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  student         Student  @relation(fields: [studentId], references: [id])

  @@unique([studentId, academicYear])
}
