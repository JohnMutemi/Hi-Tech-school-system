generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id                           String               @id @default(uuid())
  name                         String
  code                         String               @unique
  address                      String
  phone                        String
  email                        String
  logo                         String?
  isActive                     Boolean              @default(true)
  createdAt                    DateTime             @default(now())
  updatedAt                    DateTime             @updatedAt
  admissionNumberAutoIncrement Boolean              @default(true)
  admissionNumberFormat        String?
  lastAdmissionNumber          String?
  academicYears                AcademicYear[]
  classes                      Class[]
  classProgressions            ClassProgression[]
  feeStructures                FeeStructure[]
  grades                       Grade[]
  paymentRequests              PaymentRequest[]
  promotionCriteria            PromotionCriteria[]
  students                     Student[]
  studentArrears               StudentArrear[]
  termlyFees                   TermlyFeeStructure[]
  users                        User[]
  promotionRequests            PromotionRequest[]
  bulkPromotionConfigs         BulkPromotionConfig[]
}

model User {
  id                  String               @id @default(uuid())
  name                String
  email               String               @unique
  password            String
  role                String
  schoolId            String?
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  phone               String?
  employeeId          String?
  teachingClasses     Class[]              @relation("TeacherClasses")
  feeStructureLogs    FeeStructureLog[]
  exclusions          PromotionExclusion[] @relation("UserExclusions")
  promotions          PromotionLog[]       @relation("UserPromotions")
  students            Student[]            @relation("ParentStudents")
  studentProfile      Student?
  teacherProfile      TeacherProfile?
  createdTermlyFees   TermlyFeeStructure[] @relation("UserCreatedTermlyFees")
  createdCriteria     PromotionCriteria[]  @relation("CriteriaCreator")
  createdProgressions ClassProgression[]   @relation("ProgressionCreator")
  school              School?              @relation(fields: [schoolId], references: [id])
  submittedPromotionRequests PromotionRequest[] @relation("SubmittedPromotionRequests")
  approvedPromotionRequests PromotionRequest[] @relation("ApprovedPromotionRequests")
}

model TeacherProfile {
  id            String    @id @default(uuid())
  qualification String?
  dateJoined    DateTime?
  tempPassword  String?
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
}

model Grade {
  id       String  @id @default(uuid())
  name     String
  isAlumni Boolean @default(false)
  schoolId String?
  classes  Class[]
  school   School? @relation(fields: [schoolId], references: [id])
  termlyFees TermlyFeeStructure[]
}

model Class {
  id           String    @id @default(uuid())
  name         String
  schoolId     String
  teacherId    String?
  academicYear String
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  gradeId      String
  grade        Grade     @relation(fields: [gradeId], references: [id])
  school       School    @relation(fields: [schoolId], references: [id])
  teacher      User?     @relation("TeacherClasses", fields: [teacherId], references: [id])
  students     Student[]
}

model Student {
  id                    String                 @id @default(uuid())
  userId                String                 @unique
  schoolId              String
  classId               String?
  admissionNumber       String
  dateOfBirth           DateTime?
  parentId              String?
  isActive              Boolean                @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  address               String?
  gender                String?
  parentEmail           String?
  parentName            String?
  parentPhone           String?
  tempPassword          String?
  avatarUrl             String?
  dateAdmitted          DateTime?
  emergencyContact      String?
  medicalInfo           String?
  notes                 String?
  status                String                 @default("active")
  academicYear          Int?                   @default(2025)
  currentAcademicYearId String?
  currentTermId         String?
  joinedAcademicYearId  String?
  joinedTermId          String?
  feeStatements         FeeStatement[]
  payments              Payment[]
  paymentRequests       PaymentRequest[]
  promotionExclusions   PromotionExclusion[]
  promotionLogs         PromotionLog[]
  receipts              Receipt[]
  class                 Class?                 @relation(fields: [classId], references: [id])
  currentAcademicYear   AcademicYear?          @relation(fields: [currentAcademicYearId], references: [id])
  currentTerm           Term?                  @relation(fields: [currentTermId], references: [id])
  joinedAcademicYear    AcademicYear?          @relation("JoinedAcademicYear", fields: [joinedAcademicYearId], references: [id])
  joinedTerm            Term?                  @relation("JoinedTerm", fields: [joinedTermId], references: [id])
  parent                User?                  @relation("ParentStudents", fields: [parentId], references: [id])
  school                School                 @relation(fields: [schoolId], references: [id])
  user                  User                   @relation(fields: [userId], references: [id])
  studentArrears        StudentArrear[]
  studentFees           StudentFee[]
  yearlyBalances        StudentYearlyBalance[]
  studentPromotionRequests StudentPromotionRequest[]
}

model Payment {
  id              String   @id @default(uuid())
  studentId       String
  amount          Float
  paymentDate     DateTime
  referenceNumber String?
  receiptNumber   String
  description     String
  receivedBy      String
  createdAt       DateTime @default(now())
  academicYearId  String
  termId          String
  paymentMethod   String?
  student      Student       @relation(fields: [studentId], references: [id])
  receipt      Receipt?
  academicYear AcademicYear? @relation(fields: [academicYearId], references: [id])
  term         Term?         @relation(fields: [termId], references: [id])
}

model Receipt {
  id                            String        @id @default(uuid())
  paymentId                     String        @unique
  studentId                     String
  receiptNumber                 String
  amount                        Float
  paymentDate                   DateTime
  createdAt                     DateTime      @default(now())
  academicYearOutstandingAfter  Float
  academicYearOutstandingBefore Float
  termOutstandingAfter          Float?
  termOutstandingBefore         Float?
  academicYearId                String?
  termId                        String?
  paymentMethod                 String?
  referenceNumber               String?
  payment                       Payment       @relation(fields: [paymentId], references: [id])
  student                       Student       @relation(fields: [studentId], references: [id])
  academicYear                  AcademicYear? @relation(fields: [academicYearId], references: [id])
  term                          Term?         @relation(fields: [termId], references: [id])
}

model FeeStructure {
  id          String       @id @default(uuid())
  name        String
  description String
  amount      Float
  frequency   String
  dueDate     DateTime?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  schoolId    String?
  school      School?      @relation(fields: [schoolId], references: [id])
  studentFees StudentFee[]
}

model TermlyFeeStructure {
  id             String            @id @default(uuid())
  term           String
  year           Int
  totalAmount    Decimal           @db.Decimal(10, 2)
  breakdown      Json
  isActive       Boolean           @default(true)
  createdBy      String
  schoolId       String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  dueDate        DateTime?
  isReleased     Boolean           @default(false)
  gradeId        String
  academicYearId String?
  termId         String?
  logs           FeeStructureLog[]
  academicYear   AcademicYear?     @relation(fields: [academicYearId], references: [id])
  creator        User              @relation("UserCreatedTermlyFees", fields: [createdBy], references: [id])
  grade          Grade             @relation(fields: [gradeId], references: [id])
  school         School            @relation(fields: [schoolId], references: [id])
  termRef        Term?             @relation(fields: [termId], references: [id])
}

model FeeStructureLog {
  id             String             @id @default(uuid())
  feeStructureId String
  action         String
  performedBy    String
  timestamp      DateTime           @default(now())
  details        Json?
  feeStructure   TermlyFeeStructure @relation(fields: [feeStructureId], references: [id])
  user           User               @relation(fields: [performedBy], references: [id])
}

model StudentFee {
  id             String       @id @default(uuid())
  studentId      String
  feeStructureId String
  amount         Float
  dueDate        DateTime
  status         String
  balance        Float
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  feeStructure   FeeStructure @relation(fields: [feeStructureId], references: [id])
  student        Student      @relation(fields: [studentId], references: [id])
}

model FeeStatement {
  id             String   @id @default(uuid())
  studentId      String
  period         String
  openingBalance Float
  totalCharged   Float
  totalPaid      Float
  closingBalance Float
  transactions   Json
  generatedAt    DateTime
  student        Student  @relation(fields: [studentId], references: [id])
}

model PaymentRequest {
  id              String   @id @default(uuid())
  studentId       String
  schoolId        String
  amount          Float
  currency        String   @default("KES")
  paymentMethod   String
  description     String
  referenceNumber String
  callbackUrl     String?
  metadata        Json?
  createdAt       DateTime @default(now())
  expiresAt       DateTime
  status          String
  school          School   @relation(fields: [schoolId], references: [id])
  student         Student  @relation(fields: [studentId], references: [id])
}

model PromotionCriteria {
  id          String  @id @default(uuid())
  schoolId    String
  classLevel  String?  // Made nullable for bulk promotions
  name        String
  description String?
  minAverageGrade    Float?
  minSubjectPasses   Int?
  maxSubjectFailures Int?
  requireAllSubjects Boolean @default(false)
  maxOutstandingBalance Float?
  requireFullPayment    Boolean @default(false)
  allowPartialPayment   Boolean @default(true)
  minAttendanceRate Float?
  maxAbsenceDays    Int?
  maxDisciplinaryCases Int?
  requireCleanRecord   Boolean @default(false)
  requireParentConsent     Boolean @default(false)
  requireTeacherApproval   Boolean @default(true)
  requirePrincipalApproval Boolean @default(true)
  customCriteria Json?
  isActive  Boolean @default(true)
  isDefault Boolean @default(false)
  priority  Int     @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  // New fields for simplified bulk promotion
  promotionType String @default("bulk")
  minGrade Float @default(50.0)
  maxFeeBalance Float @default(0.0)
  school  School @relation(fields: [schoolId], references: [id])
  creator User?  @relation("CriteriaCreator", fields: [createdBy], references: [id])
  classProgressions ClassProgression[]
  promotionLogs     PromotionLog[]
  @@index([schoolId, classLevel, isActive])
}

// New model for bulk promotion configuration
model BulkPromotionConfig {
  id                    String   @id @default(uuid())
  schoolId              String   @unique
  minGrade              Float    @default(50.0)
  maxFeeBalance         Float    @default(0.0)
  maxDisciplinaryCases  Int      @default(0)
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  school                School   @relation(fields: [schoolId], references: [id])
}

model ClassProgression {
  id        String  @id @default(uuid())
  schoolId  String
  fromClass String
  toClass   String
  fromGrade String
  toGrade   String
  order     Int
  isActive  Boolean @default(true)
  requireCriteria     Boolean @default(true)
  criteriaId          String?
  allowManualOverride Boolean @default(false)
  fromAcademicYear String
  toAcademicYear   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  school   School             @relation(fields: [schoolId], references: [id])
  criteria PromotionCriteria? @relation(fields: [criteriaId], references: [id])
  creator  User?              @relation("ProgressionCreator", fields: [createdBy], references: [id])
}

model PromotionLog {
  id            String   @id @default(uuid())
  studentId     String
  fromClass     String
  toClass       String
  fromGrade     String
  toGrade       String
  fromYear      String
  toYear        String
  promotedBy    String
  promotionDate DateTime @default(now())
  criteriaResults   Json
  appliedCriteriaId String?
  manualOverride    Boolean @default(false)
  overrideReason    String?
  averageGrade       Float?
  attendanceRate     Float?
  outstandingBalance Float?
  disciplinaryCases  Int?
  notes         String?
  promotionType String
  exclusions      PromotionExclusion[]
  user            User                 @relation("UserPromotions", fields: [promotedBy], references: [id])
  student         Student              @relation(fields: [studentId], references: [id])
  appliedCriteria PromotionCriteria?   @relation(fields: [appliedCriteriaId], references: [id])
  @@index([studentId, promotionDate])
  @@index([fromClass, toClass, promotionDate])
}

model PromotionExclusion {
  id             String   @id @default(uuid())
  promotionLogId String
  studentId      String
  reason         String
  detailedReason String?
  criteriaFailed Json?
  excludedBy     String
  excludedAt     DateTime @default(now())
  academicGrade      Float?
  outstandingBalance Float?
  attendanceRate     Float?
  disciplinaryCases  Int?
  user         User         @relation("UserExclusions", fields: [excludedBy], references: [id])
  promotionLog PromotionLog @relation(fields: [promotionLogId], references: [id])
  student      Student      @relation(fields: [studentId], references: [id])
  @@index([studentId, excludedAt])
}

model AcademicYear {
  id                 String               @id @default(uuid())
  schoolId           String
  name               String
  startDate          DateTime
  endDate            DateTime
  isCurrent          Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  school             School               @relation(fields: [schoolId], references: [id])
  payments           Payment[]
  receipts           Receipt[]
  students           Student[]
  joinedStudents     Student[]            @relation("JoinedAcademicYear")
  studentArrears     StudentArrear[]
  terms              Term[]
  TermlyFeeStructure TermlyFeeStructure[]
  @@unique([schoolId, name])
}

model Term {
  id                 String               @id @default(uuid())
  academicYearId     String
  name               String
  startDate          DateTime
  endDate            DateTime
  isCurrent          Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  payments           Payment[]
  receipts           Receipt[]
  students           Student[]
  joinedStudents     Student[]            @relation("JoinedTerm")
  academicYear       AcademicYear         @relation(fields: [academicYearId], references: [id])
  TermlyFeeStructure TermlyFeeStructure[]
  @@unique([academicYearId, name])
}

model StudentArrear {
  id             String       @id @default(uuid())
  studentId      String
  schoolId       String
  academicYearId String
  arrearAmount   Float
  dateRecorded   DateTime     @default(now())
  notes          String?
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  school         School       @relation(fields: [schoolId], references: [id])
  student        Student      @relation(fields: [studentId], references: [id])
  @@index([studentId, academicYearId])
}

model StudentYearlyBalance {
  id               String   @id @default(uuid())
  studentId        String
  academicYear     Int
  openingBalance   Float    @default(0)
  totalCharged     Float    @default(0)
  totalPaid        Float    @default(0)
  closingBalance   Float    @default(0)
  isCarriedForward Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  student Student @relation(fields: [studentId], references: [id])
}

model PromotionRequest {
  id            String   @id @default(uuid())
  schoolId      String
  fromClass     String
  toClass       String
  submittedBy   String
  submittedAt   DateTime @default(now())
  approvedBy    String?
  approvedAt    DateTime?
  status        String
  studentCount  Int
  requestData   Json
  notes         String?
  school        School   @relation(fields: [schoolId], references: [id])
  submittedUser User     @relation("SubmittedPromotionRequests", fields: [submittedBy], references: [id])
  approvedUser  User?    @relation("ApprovedPromotionRequests", fields: [approvedBy], references: [id])
  studentPromotionRequests StudentPromotionRequest[]
  @@index([schoolId, status])
  @@index([submittedBy, submittedAt])
}

model StudentPromotionRequest {
  id                  String   @id @default(uuid())
  promotionRequestId  String
  studentId           String
  fromClass           String
  toClass             String
  outstandingBalance  Float
  isGraduating        Boolean  @default(false)
  status              String
  approvedAt          DateTime?
  notes               String?
  promotionRequest    PromotionRequest @relation(fields: [promotionRequestId], references: [id])
  student             Student          @relation(fields: [studentId], references: [id])
  @@index([studentId, status])
  @@index([promotionRequestId])
} 