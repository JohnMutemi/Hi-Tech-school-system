// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id        String   @id @default(uuid())
  name      String
  code      String   @unique
  address   String
  phone     String
  email     String
  logo      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    User[]
  students Student[]
  classes  Class[]
}

model User {
  id                String          @id @default(uuid())
  name              String
  email             String          @unique
  password          String
  role              String // 'super_admin', 'admin', 'teacher', 'student', 'parent'
  phone             String?
  employeeId        String?
  school            School?         @relation(fields: [schoolId], references: [id])
  schoolId          String?
  teacherProfile    TeacherProfile?
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  students          Student[]         @relation("ParentStudents")
  teachingClasses   Class[]           @relation("TeacherClasses")
  studentProfile    Student?
}

model TeacherProfile {
  id             String   @id @default(uuid())
  qualification  String?
  dateJoined     DateTime?
  tempPassword   String?
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
}

model Class {
  id           String   @id @default(uuid())
  name         String
  schoolId     String
  teacherId    String?
  academicYear String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  school   School    @relation(fields: [schoolId], references: [id])
  teacher  User?     @relation("TeacherClasses", fields: [teacherId], references: [id])
  students Student[]
}

model Student {
  id              String    @id @default(uuid())
  userId          String    @unique
  schoolId        String
  classId         String?
  admissionNumber String
  dateOfBirth     DateTime?
  parentId        String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user          User           @relation(fields: [userId], references: [id])
  school        School         @relation(fields: [schoolId], references: [id])
  class         Class?         @relation(fields: [classId], references: [id])
  parent        User?          @relation("ParentStudents", fields: [parentId], references: [id])
  payments      Payment[]
  studentFees   StudentFee[]
  receipts      Receipt[]
  feeStatements FeeStatement[]
}

model Payment {
  id              String   @id @default(uuid())
  studentId       String
  amount          Float
  paymentDate     DateTime
  paymentMethod   String // 'cash', 'bank_transfer', 'mobile_money', 'check'
  referenceNumber String?
  receiptNumber   String
  description     String
  receivedBy      String
  createdAt       DateTime @default(now())

  student Student  @relation(fields: [studentId], references: [id])
  receipt Receipt?
}

model Receipt {
  id                    String   @id @default(uuid())
  paymentId             String   @unique
  studentId             String
  receiptNumber         String
  amount                Float
  balance               Float
  balanceCarriedForward Float
  paymentDate           DateTime
  format                String // 'A3', 'A4', 'A5'
  createdAt             DateTime @default(now())

  payment Payment @relation(fields: [paymentId], references: [id])
  student Student @relation(fields: [studentId], references: [id])
}

model FeeStructure {
  id          String    @id @default(uuid())
  name        String
  description String
  amount      Float
  frequency   String // 'monthly', 'quarterly', 'annually', 'one-time'
  dueDate     DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  studentFees StudentFee[]
}

model StudentFee {
  id             String   @id @default(uuid())
  studentId      String
  feeStructureId String
  amount         Float
  dueDate        DateTime
  status         String // 'pending', 'paid', 'overdue', 'partial'
  balance        Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  student      Student      @relation(fields: [studentId], references: [id])
  feeStructure FeeStructure @relation(fields: [feeStructureId], references: [id])
}

model FeeStatement {
  id             String   @id @default(uuid())
  studentId      String
  period         String
  openingBalance Float
  totalCharged   Float
  totalPaid      Float
  closingBalance Float
  transactions   Json
  generatedAt    DateTime

  student Student @relation(fields: [studentId], references: [id])
}
